// <auto-generated />
using System;
using System.Collections.Generic;
using Eawv.Service.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Eawv.Service.Migrations
{
    [DbContext(typeof(EawvContext))]
    [Migration("20240708100116_NpgsqlUtcTimestamp")]
    partial class NpgsqlUtcTimestamp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.BallotDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("BallotDocuments");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BallotFamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BallotFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BallotLocality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BallotOccupationalTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CloneOrderIndex")
                        .HasColumnType("integer");

                    b.Property<bool>("Cloned")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Incumbent")
                        .HasColumnType("boolean");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OccupationalTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Origin")
                        .HasColumnType("text");

                    b.Property<string>("Party")
                        .HasColumnType("text");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.CandidateDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateDocuments");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.DomainOfInfluence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DomainOfInfluenceType")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DomainsOfInfluence");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.DomainOfInfluenceElection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("ElectionId", "DomainOfInfluenceId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("DomainOfInfluenceElections");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Election", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("date");

                    b.Property<DateTime>("ContestDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ElectionType")
                        .HasColumnType("integer");

                    b.Property<bool>("FileUploadActivated")
                        .HasColumnType("boolean");

                    b.Property<string>("FileUploadDescription")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("QuorumSignaturesCount")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmissionDeadlineBegin")
                        .HasColumnType("date");

                    b.Property<DateTime>("SubmissionDeadlineEnd")
                        .HasColumnType("date");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("TenantLogo")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.InfoText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("InfoTexts");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.List", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("DeputyUsers")
                        .HasColumnType("text[]");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Indenture")
                        .HasColumnType("text");

                    b.Property<Guid?>("ListSubUnionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ListUnionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("MemberUsers")
                        .HasColumnType("text[]");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Representative")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponsiblePartyTenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Validated")
                        .HasColumnType("boolean");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ListSubUnionId");

                    b.HasIndex("ListUnionId");

                    b.HasIndex("ElectionId", "Indenture")
                        .IsUnique();

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.ListComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("ListComments");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.ListUnion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RootListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RootListId")
                        .IsUnique();

                    b.ToTable("ListUnions");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.MarkedElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId", "Field")
                        .IsUnique();

                    b.ToTable("MarkedElements");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ShowBallotPaperInfos")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowPartyOnProporzElection")
                        .HasColumnType("boolean");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("TenantLogo")
                        .HasColumnType("bytea");

                    b.Property<string>("WabstiExportTenantTitle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.TemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<bool>("Landscape")
                        .HasColumnType("boolean");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Type", "TenantId", "Key")
                        .IsUnique();

                    b.ToTable("Templates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3464ef11-14e5-9cbb-fcc5-fd31fc1704fd"),
                            Format = 0,
                            Key = "BaseLayout",
                            Landscape = false,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("a148bd7e-0f06-7117-5de1-6956113f1b06"),
                            Format = 0,
                            Key = "BaseLayoutHeader",
                            Landscape = false,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("7473694c-6143-646e-6964-61746573242d"),
                            Filename = "{ELECTION_NAME} - Kandidaten.pdf",
                            Format = 0,
                            Landscape = true,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("64c50e44-f625-f533-5a88-bab71c3136db"),
                            Filename = "{ELECTION_NAME} - Kandidaten (Bundeskanzlei).csv",
                            Format = 0,
                            Landscape = false,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("0ea74799-d3fa-c8ea-b7e6-af290716b6c8"),
                            Filename = "{ELECTION_NAME} - Kandidaten.csv",
                            Format = 0,
                            Landscape = false,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("906ac8af-b905-0d33-1f03-a462c66f0387"),
                            Filename = "{ELECTION_NAME} - Kandidaten (leer).pdf",
                            Format = 0,
                            Landscape = true,
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("6e676953-7461-726f-6965-73242d000000"),
                            Filename = "{ELECTION_NAME} - Unterzeichnende (leer).pdf",
                            Format = 0,
                            Landscape = true,
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("17213c83-88e6-69a2-7f34-a3b716acfda5"),
                            Filename = "{ELECTION_NAME} - Listenverbindungen (leer).pdf",
                            Format = 0,
                            Landscape = true,
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("f5021674-afce-9c2c-a533-8a401bb3f2e4"),
                            Filename = "{ELECTION_NAME} - Statuswechsel Wahlvorschlag",
                            Format = 0,
                            Landscape = false,
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("4bec31bf-5e45-7b3c-710e-bd4213a24856"),
                            Filename = "{ELECTION_NAME} - Eingang Kommentar",
                            Format = 0,
                            Landscape = false,
                            Type = 8
                        },
                        new
                        {
                            Id = new Guid("31484345-3735-2d24-0000-000000000000"),
                            Filename = "{ELECTION_NAME} - eCH-157.xml",
                            Format = 0,
                            Landscape = false,
                            Type = 9
                        });
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.BallotDocument", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Election", "Election")
                        .WithMany("Documents")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Candidate", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.List", "List")
                        .WithMany("Candidates")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.CandidateDocument", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Candidate", "Candidate")
                        .WithMany("Documents")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.DomainOfInfluenceElection", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("ParticipatingElections")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eawv.Service.DataAccess.Entities.Election", "Election")
                        .WithMany("DomainsOfInfluence")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("Election");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.InfoText", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Election", "Election")
                        .WithMany("InfoTexts")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Election");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.List", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Election", "Election")
                        .WithMany("Lists")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eawv.Service.DataAccess.Entities.ListUnion", "ListSubUnion")
                        .WithMany("SubUnionLists")
                        .HasForeignKey("ListSubUnionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Eawv.Service.DataAccess.Entities.ListUnion", "ListUnion")
                        .WithMany("UnionLists")
                        .HasForeignKey("ListUnionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Election");

                    b.Navigation("ListSubUnion");

                    b.Navigation("ListUnion");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.ListComment", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.List", "List")
                        .WithMany("Comments")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.ListUnion", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.List", "RootList")
                        .WithOne("RootListUnion")
                        .HasForeignKey("Eawv.Service.DataAccess.Entities.ListUnion", "RootListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RootList");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.MarkedElement", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Candidate", "Candidate")
                        .WithMany("MarkedElements")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Candidate", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("MarkedElements");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.DomainOfInfluence", b =>
                {
                    b.Navigation("ParticipatingElections");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Election", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("DomainsOfInfluence");

                    b.Navigation("InfoTexts");

                    b.Navigation("Lists");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.List", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Comments");

                    b.Navigation("RootListUnion");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.ListUnion", b =>
                {
                    b.Navigation("SubUnionLists");

                    b.Navigation("UnionLists");
                });
#pragma warning restore 612, 618
        }
    }
}
