// <auto-generated />
using System;
using System.Collections.Generic;
using Eawv.Service.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Eawv.Service.Migrations
{
    [DbContext(typeof(EawvContext))]
    [Migration("20181218135011_TemplateListCandidatesv11")]
    partial class TemplateListCandidatesv11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.BallotDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<byte[]>("Document")
                        .IsRequired();

                    b.Property<Guid>("ElectionId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("BallotDocuments");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BallotFamilyName")
                        .IsRequired();

                    b.Property<string>("BallotFirstName")
                        .IsRequired();

                    b.Property<string>("BallotOccupationalTitle")
                        .IsRequired();

                    b.Property<bool>("Cloned");

                    b.Property<Guid>("CountryId");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FamilyName")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("HouseNumber");

                    b.Property<bool>("Incumbent");

                    b.Property<int>("Index");

                    b.Property<Guid>("ListId");

                    b.Property<string>("Locality")
                        .IsRequired();

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OccupationalTitle")
                        .IsRequired();

                    b.Property<string>("Origin");

                    b.Property<string>("OriginCanton");

                    b.Property<int>("Sex");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ListId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IsoName")
                        .IsRequired();

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("IsoName");

                    b.ToTable("Countries");

                    b.HasData(
                        new { Id = new Guid("00004641-0000-0000-0000-000000000000"), IsoName = "AF", ShortName = "Afghanistan" },
                        new { Id = new Guid("00004745-0000-0000-0000-000000000000"), IsoName = "EG", ShortName = "Ägypten" },
                        new { Id = new Guid("00004c41-0000-0000-0000-000000000000"), IsoName = "AL", ShortName = "Albanien" },
                        new { Id = new Guid("00005a44-0000-0000-0000-000000000000"), IsoName = "DZ", ShortName = "Algerien" },
                        new { Id = new Guid("00004441-0000-0000-0000-000000000000"), IsoName = "AD", ShortName = "Andorra" },
                        new { Id = new Guid("00004f41-0000-0000-0000-000000000000"), IsoName = "AO", ShortName = "Angola" },
                        new { Id = new Guid("00004741-0000-0000-0000-000000000000"), IsoName = "AG", ShortName = "Antigua und Barbuda" },
                        new { Id = new Guid("00005147-0000-0000-0000-000000000000"), IsoName = "GQ", ShortName = "Äquatorialguinea" },
                        new { Id = new Guid("00005241-0000-0000-0000-000000000000"), IsoName = "AR", ShortName = "Argentinien" },
                        new { Id = new Guid("00004d41-0000-0000-0000-000000000000"), IsoName = "AM", ShortName = "Armenien" },
                        new { Id = new Guid("00005a41-0000-0000-0000-000000000000"), IsoName = "AZ", ShortName = "Aserbaidschan" },
                        new { Id = new Guid("00005445-0000-0000-0000-000000000000"), IsoName = "ET", ShortName = "Äthiopien" },
                        new { Id = new Guid("00005541-0000-0000-0000-000000000000"), IsoName = "AU", ShortName = "Australien" },
                        new { Id = new Guid("00005342-0000-0000-0000-000000000000"), IsoName = "BS", ShortName = "Bahamas" },
                        new { Id = new Guid("00004842-0000-0000-0000-000000000000"), IsoName = "BH", ShortName = "Bahrain" },
                        new { Id = new Guid("00004442-0000-0000-0000-000000000000"), IsoName = "BD", ShortName = "Bangladesch" },
                        new { Id = new Guid("00004242-0000-0000-0000-000000000000"), IsoName = "BB", ShortName = "Barbados" },
                        new { Id = new Guid("00005942-0000-0000-0000-000000000000"), IsoName = "BY", ShortName = "Weißrussland" },
                        new { Id = new Guid("00004542-0000-0000-0000-000000000000"), IsoName = "BE", ShortName = "Belgien" },
                        new { Id = new Guid("00005a42-0000-0000-0000-000000000000"), IsoName = "BZ", ShortName = "Belize" },
                        new { Id = new Guid("00004a42-0000-0000-0000-000000000000"), IsoName = "BJ", ShortName = "Benin" },
                        new { Id = new Guid("00005442-0000-0000-0000-000000000000"), IsoName = "BT", ShortName = "Bhutan" },
                        new { Id = new Guid("00004f42-0000-0000-0000-000000000000"), IsoName = "BO", ShortName = "Bolivien" },
                        new { Id = new Guid("00004142-0000-0000-0000-000000000000"), IsoName = "BA", ShortName = "Bosnien und Herzegowina" },
                        new { Id = new Guid("00005742-0000-0000-0000-000000000000"), IsoName = "BW", ShortName = "Botswana" },
                        new { Id = new Guid("00005242-0000-0000-0000-000000000000"), IsoName = "BR", ShortName = "Brasilien" },
                        new { Id = new Guid("00004e42-0000-0000-0000-000000000000"), IsoName = "BN", ShortName = "Brunei" },
                        new { Id = new Guid("00004742-0000-0000-0000-000000000000"), IsoName = "BG", ShortName = "Bulgarien" },
                        new { Id = new Guid("00004642-0000-0000-0000-000000000000"), IsoName = "BF", ShortName = "Burkina Faso" },
                        new { Id = new Guid("00004942-0000-0000-0000-000000000000"), IsoName = "BI", ShortName = "Burundi" },
                        new { Id = new Guid("00004c43-0000-0000-0000-000000000000"), IsoName = "CL", ShortName = "Chile" },
                        new { Id = new Guid("00004e43-0000-0000-0000-000000000000"), IsoName = "CN", ShortName = "Volksrepublik China" },
                        new { Id = new Guid("00005243-0000-0000-0000-000000000000"), IsoName = "CR", ShortName = "Costa Rica" },
                        new { Id = new Guid("00004943-0000-0000-0000-000000000000"), IsoName = "CI", ShortName = "Elfenbeinküste" },
                        new { Id = new Guid("00004b44-0000-0000-0000-000000000000"), IsoName = "DK", ShortName = "Dänemark" },
                        new { Id = new Guid("00004544-0000-0000-0000-000000000000"), IsoName = "DE", ShortName = "Deutschland" },
                        new { Id = new Guid("00004d44-0000-0000-0000-000000000000"), IsoName = "DM", ShortName = "Dominica" },
                        new { Id = new Guid("00004f44-0000-0000-0000-000000000000"), IsoName = "DO", ShortName = "Dominikanische Republik" },
                        new { Id = new Guid("00004a44-0000-0000-0000-000000000000"), IsoName = "DJ", ShortName = "Dschibuti" },
                        new { Id = new Guid("00004345-0000-0000-0000-000000000000"), IsoName = "EC", ShortName = "Ecuador" },
                        new { Id = new Guid("00005653-0000-0000-0000-000000000000"), IsoName = "SV", ShortName = "El Salvador" },
                        new { Id = new Guid("00005245-0000-0000-0000-000000000000"), IsoName = "ER", ShortName = "Eritrea" },
                        new { Id = new Guid("00004545-0000-0000-0000-000000000000"), IsoName = "EE", ShortName = "Estland" },
                        new { Id = new Guid("00004a46-0000-0000-0000-000000000000"), IsoName = "FJ", ShortName = "Fidschi" },
                        new { Id = new Guid("00004946-0000-0000-0000-000000000000"), IsoName = "FI", ShortName = "Finnland" },
                        new { Id = new Guid("00005246-0000-0000-0000-000000000000"), IsoName = "FR", ShortName = "Frankreich" },
                        new { Id = new Guid("00004147-0000-0000-0000-000000000000"), IsoName = "GA", ShortName = "Gabun" },
                        new { Id = new Guid("00004d47-0000-0000-0000-000000000000"), IsoName = "GM", ShortName = "Gambia" },
                        new { Id = new Guid("00004547-0000-0000-0000-000000000000"), IsoName = "GE", ShortName = "Georgien" },
                        new { Id = new Guid("00004847-0000-0000-0000-000000000000"), IsoName = "GH", ShortName = "Ghana" },
                        new { Id = new Guid("00004447-0000-0000-0000-000000000000"), IsoName = "GD", ShortName = "Grenada" },
                        new { Id = new Guid("00005247-0000-0000-0000-000000000000"), IsoName = "GR", ShortName = "Griechenland" },
                        new { Id = new Guid("00005447-0000-0000-0000-000000000000"), IsoName = "GT", ShortName = "Guatemala" },
                        new { Id = new Guid("00004e47-0000-0000-0000-000000000000"), IsoName = "GN", ShortName = "Guinea" },
                        new { Id = new Guid("00005747-0000-0000-0000-000000000000"), IsoName = "GW", ShortName = "Guinea-Bissau" },
                        new { Id = new Guid("00005947-0000-0000-0000-000000000000"), IsoName = "GY", ShortName = "Guyana" },
                        new { Id = new Guid("00005448-0000-0000-0000-000000000000"), IsoName = "HT", ShortName = "Haiti" },
                        new { Id = new Guid("00004e48-0000-0000-0000-000000000000"), IsoName = "HN", ShortName = "Honduras" },
                        new { Id = new Guid("00004e49-0000-0000-0000-000000000000"), IsoName = "IN", ShortName = "Indien" },
                        new { Id = new Guid("00004449-0000-0000-0000-000000000000"), IsoName = "ID", ShortName = "Indonesien" },
                        new { Id = new Guid("00005149-0000-0000-0000-000000000000"), IsoName = "IQ", ShortName = "Irak" },
                        new { Id = new Guid("00005249-0000-0000-0000-000000000000"), IsoName = "IR", ShortName = "Iran" },
                        new { Id = new Guid("00004549-0000-0000-0000-000000000000"), IsoName = "IE", ShortName = "Irland" },
                        new { Id = new Guid("00005349-0000-0000-0000-000000000000"), IsoName = "IS", ShortName = "Island" },
                        new { Id = new Guid("00004c49-0000-0000-0000-000000000000"), IsoName = "IL", ShortName = "Israel" },
                        new { Id = new Guid("00005449-0000-0000-0000-000000000000"), IsoName = "IT", ShortName = "Italien" },
                        new { Id = new Guid("00004d4a-0000-0000-0000-000000000000"), IsoName = "JM", ShortName = "Jamaika" },
                        new { Id = new Guid("0000504a-0000-0000-0000-000000000000"), IsoName = "JP", ShortName = "Japan" },
                        new { Id = new Guid("00004559-0000-0000-0000-000000000000"), IsoName = "YE", ShortName = "Jemen" },
                        new { Id = new Guid("00004f4a-0000-0000-0000-000000000000"), IsoName = "JO", ShortName = "Jordanien" },
                        new { Id = new Guid("0000484b-0000-0000-0000-000000000000"), IsoName = "KH", ShortName = "Kambodscha" },
                        new { Id = new Guid("00004d43-0000-0000-0000-000000000000"), IsoName = "CM", ShortName = "Kamerun" },
                        new { Id = new Guid("00004143-0000-0000-0000-000000000000"), IsoName = "CA", ShortName = "Kanada" },
                        new { Id = new Guid("00005643-0000-0000-0000-000000000000"), IsoName = "CV", ShortName = "Kap Verde" },
                        new { Id = new Guid("00005a4b-0000-0000-0000-000000000000"), IsoName = "KZ", ShortName = "Kasachstan" },
                        new { Id = new Guid("00004151-0000-0000-0000-000000000000"), IsoName = "QA", ShortName = "Katar" },
                        new { Id = new Guid("0000454b-0000-0000-0000-000000000000"), IsoName = "KE", ShortName = "Kenia" },
                        new { Id = new Guid("0000474b-0000-0000-0000-000000000000"), IsoName = "KG", ShortName = "Kirgisistan" },
                        new { Id = new Guid("0000494b-0000-0000-0000-000000000000"), IsoName = "KI", ShortName = "Kiribati" },
                        new { Id = new Guid("00004f43-0000-0000-0000-000000000000"), IsoName = "CO", ShortName = "Kolumbien" },
                        new { Id = new Guid("00004d4b-0000-0000-0000-000000000000"), IsoName = "KM", ShortName = "Komoren" },
                        new { Id = new Guid("00004443-0000-0000-0000-000000000000"), IsoName = "CD", ShortName = "Kongo, Demokratische Republik" },
                        new { Id = new Guid("00004743-0000-0000-0000-000000000000"), IsoName = "CG", ShortName = "Kongo, Republik" },
                        new { Id = new Guid("0000504b-0000-0000-0000-000000000000"), IsoName = "KP", ShortName = "Korea, Nord" },
                        new { Id = new Guid("0000524b-0000-0000-0000-000000000000"), IsoName = "KR", ShortName = "Korea, Süd" },
                        new { Id = new Guid("00005248-0000-0000-0000-000000000000"), IsoName = "HR", ShortName = "Kroatien" },
                        new { Id = new Guid("00005543-0000-0000-0000-000000000000"), IsoName = "CU", ShortName = "Kuba" },
                        new { Id = new Guid("0000574b-0000-0000-0000-000000000000"), IsoName = "KW", ShortName = "Kuwait" },
                        new { Id = new Guid("0000414c-0000-0000-0000-000000000000"), IsoName = "LA", ShortName = "Laos" },
                        new { Id = new Guid("0000534c-0000-0000-0000-000000000000"), IsoName = "LS", ShortName = "Lesotho" },
                        new { Id = new Guid("0000564c-0000-0000-0000-000000000000"), IsoName = "LV", ShortName = "Lettland" },
                        new { Id = new Guid("0000424c-0000-0000-0000-000000000000"), IsoName = "LB", ShortName = "Libanon" },
                        new { Id = new Guid("0000524c-0000-0000-0000-000000000000"), IsoName = "LR", ShortName = "Liberia" },
                        new { Id = new Guid("0000594c-0000-0000-0000-000000000000"), IsoName = "LY", ShortName = "Libyen" },
                        new { Id = new Guid("0000494c-0000-0000-0000-000000000000"), IsoName = "LI", ShortName = "Liechtenstein" },
                        new { Id = new Guid("0000544c-0000-0000-0000-000000000000"), IsoName = "LT", ShortName = "Litauen" },
                        new { Id = new Guid("0000554c-0000-0000-0000-000000000000"), IsoName = "LU", ShortName = "Luxemburg" },
                        new { Id = new Guid("0000474d-0000-0000-0000-000000000000"), IsoName = "MG", ShortName = "Madagaskar" },
                        new { Id = new Guid("0000574d-0000-0000-0000-000000000000"), IsoName = "MW", ShortName = "Malawi" },
                        new { Id = new Guid("0000594d-0000-0000-0000-000000000000"), IsoName = "MY", ShortName = "Malaysia" },
                        new { Id = new Guid("0000564d-0000-0000-0000-000000000000"), IsoName = "MV", ShortName = "Malediven" },
                        new { Id = new Guid("00004c4d-0000-0000-0000-000000000000"), IsoName = "ML", ShortName = "Mali" },
                        new { Id = new Guid("0000544d-0000-0000-0000-000000000000"), IsoName = "MT", ShortName = "Malta" },
                        new { Id = new Guid("0000414d-0000-0000-0000-000000000000"), IsoName = "MA", ShortName = "Marokko" },
                        new { Id = new Guid("0000484d-0000-0000-0000-000000000000"), IsoName = "MH", ShortName = "Marshallinseln" },
                        new { Id = new Guid("0000524d-0000-0000-0000-000000000000"), IsoName = "MR", ShortName = "Mauretanien" },
                        new { Id = new Guid("0000554d-0000-0000-0000-000000000000"), IsoName = "MU", ShortName = "Mauritius" },
                        new { Id = new Guid("00004b4d-0000-0000-0000-000000000000"), IsoName = "MK", ShortName = "Mazedonien" },
                        new { Id = new Guid("0000584d-0000-0000-0000-000000000000"), IsoName = "MX", ShortName = "Mexiko" },
                        new { Id = new Guid("00004d46-0000-0000-0000-000000000000"), IsoName = "FM", ShortName = "Mikronesien" },
                        new { Id = new Guid("0000444d-0000-0000-0000-000000000000"), IsoName = "MD", ShortName = "Moldau" },
                        new { Id = new Guid("0000434d-0000-0000-0000-000000000000"), IsoName = "MC", ShortName = "Monaco" },
                        new { Id = new Guid("00004e4d-0000-0000-0000-000000000000"), IsoName = "MN", ShortName = "Mongolei" },
                        new { Id = new Guid("0000454d-0000-0000-0000-000000000000"), IsoName = "ME", ShortName = "Montenegro" },
                        new { Id = new Guid("00005a4d-0000-0000-0000-000000000000"), IsoName = "MZ", ShortName = "Mosambik" },
                        new { Id = new Guid("00004d4d-0000-0000-0000-000000000000"), IsoName = "MM", ShortName = "Myanmar" },
                        new { Id = new Guid("0000414e-0000-0000-0000-000000000000"), IsoName = "NA", ShortName = "Namibia" },
                        new { Id = new Guid("0000524e-0000-0000-0000-000000000000"), IsoName = "NR", ShortName = "Nauru" },
                        new { Id = new Guid("0000504e-0000-0000-0000-000000000000"), IsoName = "NP", ShortName = "Nepal" },
                        new { Id = new Guid("00005a4e-0000-0000-0000-000000000000"), IsoName = "NZ", ShortName = "Neuseeland" },
                        new { Id = new Guid("0000494e-0000-0000-0000-000000000000"), IsoName = "NI", ShortName = "Nicaragua" },
                        new { Id = new Guid("00004c4e-0000-0000-0000-000000000000"), IsoName = "NL", ShortName = "Niederlande" },
                        new { Id = new Guid("0000454e-0000-0000-0000-000000000000"), IsoName = "NE", ShortName = "Niger" },
                        new { Id = new Guid("0000474e-0000-0000-0000-000000000000"), IsoName = "NG", ShortName = "Nigeria" },
                        new { Id = new Guid("00004f4e-0000-0000-0000-000000000000"), IsoName = "NO", ShortName = "Norwegen" },
                        new { Id = new Guid("00004d4f-0000-0000-0000-000000000000"), IsoName = "OM", ShortName = "Oman" },
                        new { Id = new Guid("00005441-0000-0000-0000-000000000000"), IsoName = "AT", ShortName = "Österreich" },
                        new { Id = new Guid("00004c54-0000-0000-0000-000000000000"), IsoName = "TL", ShortName = "Osttimor" },
                        new { Id = new Guid("00004b50-0000-0000-0000-000000000000"), IsoName = "PK", ShortName = "Pakistan" },
                        new { Id = new Guid("00005750-0000-0000-0000-000000000000"), IsoName = "PW", ShortName = "Palau" },
                        new { Id = new Guid("00004150-0000-0000-0000-000000000000"), IsoName = "PA", ShortName = "Panama" },
                        new { Id = new Guid("00004750-0000-0000-0000-000000000000"), IsoName = "PG", ShortName = "Papua-Neuguinea" },
                        new { Id = new Guid("00005950-0000-0000-0000-000000000000"), IsoName = "PY", ShortName = "Paraguay" },
                        new { Id = new Guid("00004550-0000-0000-0000-000000000000"), IsoName = "PE", ShortName = "Peru" },
                        new { Id = new Guid("00004850-0000-0000-0000-000000000000"), IsoName = "PH", ShortName = "Philippinen" },
                        new { Id = new Guid("00004c50-0000-0000-0000-000000000000"), IsoName = "PL", ShortName = "Polen" },
                        new { Id = new Guid("00005450-0000-0000-0000-000000000000"), IsoName = "PT", ShortName = "Portugal" },
                        new { Id = new Guid("00005752-0000-0000-0000-000000000000"), IsoName = "RW", ShortName = "Ruanda" },
                        new { Id = new Guid("00004f52-0000-0000-0000-000000000000"), IsoName = "RO", ShortName = "Rumänien" },
                        new { Id = new Guid("00005552-0000-0000-0000-000000000000"), IsoName = "RU", ShortName = "Russland" },
                        new { Id = new Guid("00004253-0000-0000-0000-000000000000"), IsoName = "SB", ShortName = "Salomonen" },
                        new { Id = new Guid("00004d5a-0000-0000-0000-000000000000"), IsoName = "ZM", ShortName = "Sambia" },
                        new { Id = new Guid("00005357-0000-0000-0000-000000000000"), IsoName = "WS", ShortName = "Samoa" },
                        new { Id = new Guid("00004d53-0000-0000-0000-000000000000"), IsoName = "SM", ShortName = "San Marino" },
                        new { Id = new Guid("00005453-0000-0000-0000-000000000000"), IsoName = "ST", ShortName = "São Tomé und Príncipe" },
                        new { Id = new Guid("00004153-0000-0000-0000-000000000000"), IsoName = "SA", ShortName = "Saudi-Arabien" },
                        new { Id = new Guid("00004553-0000-0000-0000-000000000000"), IsoName = "SE", ShortName = "Schweden" },
                        new { Id = new Guid("00004843-0000-0000-0000-000000000000"), IsoName = "CH", ShortName = "Schweiz" },
                        new { Id = new Guid("00004e53-0000-0000-0000-000000000000"), IsoName = "SN", ShortName = "Senegal" },
                        new { Id = new Guid("00005352-0000-0000-0000-000000000000"), IsoName = "RS", ShortName = "Serbien" },
                        new { Id = new Guid("00004353-0000-0000-0000-000000000000"), IsoName = "SC", ShortName = "Seychellen" },
                        new { Id = new Guid("00004c53-0000-0000-0000-000000000000"), IsoName = "SL", ShortName = "Sierra Leone" },
                        new { Id = new Guid("0000575a-0000-0000-0000-000000000000"), IsoName = "ZW", ShortName = "Simbabwe" },
                        new { Id = new Guid("00004753-0000-0000-0000-000000000000"), IsoName = "SG", ShortName = "Singapur" },
                        new { Id = new Guid("00004b53-0000-0000-0000-000000000000"), IsoName = "SK", ShortName = "Slowakei" },
                        new { Id = new Guid("00004953-0000-0000-0000-000000000000"), IsoName = "SI", ShortName = "Slowenien" },
                        new { Id = new Guid("00004f53-0000-0000-0000-000000000000"), IsoName = "SO", ShortName = "Somalia" },
                        new { Id = new Guid("00005345-0000-0000-0000-000000000000"), IsoName = "ES", ShortName = "Spanien" },
                        new { Id = new Guid("00004b4c-0000-0000-0000-000000000000"), IsoName = "LK", ShortName = "Sri Lanka" },
                        new { Id = new Guid("00004e4b-0000-0000-0000-000000000000"), IsoName = "KN", ShortName = "St. Kitts und Nevis" },
                        new { Id = new Guid("0000434c-0000-0000-0000-000000000000"), IsoName = "LC", ShortName = "St. Lucia" },
                        new { Id = new Guid("00004356-0000-0000-0000-000000000000"), IsoName = "VC", ShortName = "St. Vincent und die Grenadinen" },
                        new { Id = new Guid("0000415a-0000-0000-0000-000000000000"), IsoName = "ZA", ShortName = "Südafrika" },
                        new { Id = new Guid("00004453-0000-0000-0000-000000000000"), IsoName = "SD", ShortName = "Sudan" },
                        new { Id = new Guid("00005353-0000-0000-0000-000000000000"), IsoName = "SS", ShortName = "Südsudan" },
                        new { Id = new Guid("00005253-0000-0000-0000-000000000000"), IsoName = "SR", ShortName = "Suriname" },
                        new { Id = new Guid("00005a53-0000-0000-0000-000000000000"), IsoName = "SZ", ShortName = "Swasiland" },
                        new { Id = new Guid("00005953-0000-0000-0000-000000000000"), IsoName = "SY", ShortName = "Syrien" },
                        new { Id = new Guid("00004a54-0000-0000-0000-000000000000"), IsoName = "TJ", ShortName = "Tadschikistan" },
                        new { Id = new Guid("00005a54-0000-0000-0000-000000000000"), IsoName = "TZ", ShortName = "Tansania" },
                        new { Id = new Guid("00004854-0000-0000-0000-000000000000"), IsoName = "TH", ShortName = "Thailand" },
                        new { Id = new Guid("00004754-0000-0000-0000-000000000000"), IsoName = "TG", ShortName = "Togo" },
                        new { Id = new Guid("00004f54-0000-0000-0000-000000000000"), IsoName = "TO", ShortName = "Tonga" },
                        new { Id = new Guid("00005454-0000-0000-0000-000000000000"), IsoName = "TT", ShortName = "Trinidad und Tobago" },
                        new { Id = new Guid("00004454-0000-0000-0000-000000000000"), IsoName = "TD", ShortName = "Tschad" },
                        new { Id = new Guid("00005a43-0000-0000-0000-000000000000"), IsoName = "CZ", ShortName = "Tschechien" },
                        new { Id = new Guid("00004e54-0000-0000-0000-000000000000"), IsoName = "TN", ShortName = "Tunesien" },
                        new { Id = new Guid("00005254-0000-0000-0000-000000000000"), IsoName = "TR", ShortName = "Türkei" },
                        new { Id = new Guid("00004d54-0000-0000-0000-000000000000"), IsoName = "TM", ShortName = "Turkmenistan" },
                        new { Id = new Guid("00005654-0000-0000-0000-000000000000"), IsoName = "TV", ShortName = "Tuvalu" },
                        new { Id = new Guid("00004755-0000-0000-0000-000000000000"), IsoName = "UG", ShortName = "Uganda" },
                        new { Id = new Guid("00004155-0000-0000-0000-000000000000"), IsoName = "UA", ShortName = "Ukraine" },
                        new { Id = new Guid("00005548-0000-0000-0000-000000000000"), IsoName = "HU", ShortName = "Ungarn" },
                        new { Id = new Guid("00005955-0000-0000-0000-000000000000"), IsoName = "UY", ShortName = "Uruguay" },
                        new { Id = new Guid("00005a55-0000-0000-0000-000000000000"), IsoName = "UZ", ShortName = "Usbekistan" },
                        new { Id = new Guid("00005556-0000-0000-0000-000000000000"), IsoName = "VU", ShortName = "Vanuatu" },
                        new { Id = new Guid("00004556-0000-0000-0000-000000000000"), IsoName = "VE", ShortName = "Venezuela" },
                        new { Id = new Guid("00004541-0000-0000-0000-000000000000"), IsoName = "AE", ShortName = "Vereinigte Arabische Emirate" },
                        new { Id = new Guid("00005355-0000-0000-0000-000000000000"), IsoName = "US", ShortName = "Vereinigte Staaten" },
                        new { Id = new Guid("00004247-0000-0000-0000-000000000000"), IsoName = "GB", ShortName = "Vereinigtes Königreich" },
                        new { Id = new Guid("00004e56-0000-0000-0000-000000000000"), IsoName = "VN", ShortName = "Vietnam" },
                        new { Id = new Guid("00004643-0000-0000-0000-000000000000"), IsoName = "CF", ShortName = "Zentral­afrikanische Republik" },
                        new { Id = new Guid("00005943-0000-0000-0000-000000000000"), IsoName = "CY", ShortName = "Zypern" }
                    );
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.DomainOfInfluence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("DomainOfInfluenceType");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OfficialId")
                        .IsRequired();

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("TenantId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DomainsOfInfluence");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.DomainOfInfluenceElection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("DomainOfInfluenceId");

                    b.Property<Guid>("ElectionId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("NumberOfMandates");

                    b.HasKey("Id");

                    b.HasAlternateKey("ElectionId", "DomainOfInfluenceId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("DomainOfInfluenceElections");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Election", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ContestDate");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<int>("ElectionType");

                    b.Property<bool>("FileUploadActivated");

                    b.Property<string>("FileUploadDescription");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("QuorumSignaturesCount");

                    b.Property<int>("State");

                    b.Property<DateTime>("SubmissionDeadlineBegin");

                    b.Property<DateTime>("SubmissionDeadlineEnd");

                    b.Property<string>("TenantId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.InfoText", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid?>("ElectionId");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("InfoTexts");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.List", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<List<string>>("DeputyUsers");

                    b.Property<string>("Description");

                    b.Property<Guid>("ElectionId");

                    b.Property<string>("Indenture");

                    b.Property<DateTime?>("IndentureModifiedDate");

                    b.Property<Guid?>("ListSubUnionId");

                    b.Property<Guid?>("ListUnionId");

                    b.Property<bool>("Locked");

                    b.Property<List<string>>("MemberUsers");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ResponsiblePartyTenantId")
                        .IsRequired();

                    b.Property<int>("SortOrder");

                    b.Property<int>("State");

                    b.Property<bool>("Validated");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.HasIndex("ListSubUnionId");

                    b.HasIndex("ListUnionId");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.ListUnion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("RootListId");

                    b.HasKey("Id");

                    b.HasIndex("RootListId")
                        .IsUnique();

                    b.ToTable("ListUnions");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.MarkedElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CandidateId");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Field")
                        .IsRequired();

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId", "Field")
                        .IsUnique();

                    b.ToTable("MarkedElements");
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.TemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Filename");

                    b.Property<int>("Format");

                    b.Property<bool>("Landscape");

                    b.Property<string>("TenantId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Templates");

                    b.HasData(
                        new { Id = new Guid("7473694c-6143-646e-6964-617465732d00"), Content = @"@using Eawv.Service.DataAccess.Entities
@using RazorLight
@using System.Linq
@using System
@inherits TemplatePage<Eawv.Service.Models.TemplateServiceModels.TemplateBag>
<html>
  <head>
    <meta charset=""UTF-8"" />
    <style>
      body {
        margin: 0;
        padding: 0;
        position: relative;
        font-family: Arial, Helvetica, sans-serif;
        font-size: 12px;
      }

      @(""@"")media only screen {
        body {
          background-color: gray;
          padding: 1cm; // default of pdf renderer
        }

        .doc {
          background-color: white;
        }
      }

      h1,
      h2,
      h3,
      h4,
      h5 {
        margin: 0;
      }

      h1 {
        margin-bottom: 1mm;
      }

      .input {
        height: 1rem;
        position: relative;
        display: inline-block;
        padding: 0 1mm;
        box-sizing: border-box;
      }
      .input .border {
        border: 1px solid #999;
        border-top: none;
        height: 1mm;
        margin-top: 3mm;
        margin: 3mm 0.5mm 0.5mm 0.5mm;
        bottom: 0;
        position: absolute;
        left: 0;
        right: 0;
      }
      input {
        border: none;
        width: 100%;
        position: relative;
        bottom: 1mm;
      }
      .inline-input {
        bottom: -.5mm;
      }

      .w-2 {
        width: 2rem;
      }
      .w-4 {
        width: 4rem;
      }
      .w-6 {
        width: 6rem;
      }
      .w-16 {
        width: 16rem;
      }

      .col-main {
        width: 19cm;
      }

      .col-right {
        width: 8.5cm;
      }

      .label {
        font-size: 1.1rem;
        font-weight: 700;
        color: #999;
        margin-right: 0.2rem;
        position: relative;
        top: -1mm;
      }

      .size-A4.landscape {
        width: 297mm;
      }

      .size-A4 {
        width: 210mm;
      }

      .hint {
        font-size: 8pt;
        color: #555;
      }

      .filled {
        background-color: #dadada;
      }

      .small {
        font-size: 7pt;
      }
      .bold {
        font-weight: 700;
      }
      .super {
        vertical-align: super;
      }

      .row {
        display: flex;
        flex-direction: row;
        margin-bottom: 0.15rem;
      }
      .col {
        display: flex;
        flex-direction: column;
      }
      .stretch {
        justify-content: stretch;
      }
      .space {
        justify-content: space-between;
      }
      .grow {
        flex-grow: 1;
      }
      .no-shrink {
        flex-shrink: 0;
      }
      .end {
        justify-content: flex-end;
      }
      .center {
        justify-content: center;
      }
      .right {
        text-align: right;
      }
      .inline {
        display: inline-block;
        margin: 0;
      }
      .fullwidth {
        width: 100%;
      }
      .spacer {
        display: inline-block;
        width: 0.5rem;
      }
      .space-bottom {
        margin-bottom: 1.5mm;
      }
      .space-right {
        margin-right: 2mm;
      }

      .upright {
        writing-mode: vertical-lr;
        transform: rotate(-180deg);
      }

      table {
        margin-bottom: 1.5mm;
      }

      table,
      th,
      td {
        font-size: 11px;
        border-collapse: collapse;
        border: 1px solid #000;
      }

      th {
        background-color: #dadada;
        vertical-align: top;
      }

      th,
      td {
        padding: 1mm;
      }

      thead tr > tr th {
        font-weight: 400;
      }

      thead {
        height: 200px;
      }
      tbody {
        background-color: #fff;
      }
      tbody td {
        border-top: 1px dashed #000;
        border-bottom: 1px dashed #000;
      }

      tbody tr {
        height: 1cm;
      }
      
      tbody tr > td.right {
        text-align: right;
      }
      
      tbody tr > td.center {
        text-align: center;
      }

      .top-no-border th,
      .top-no-border tr {
        border-top: none;
      }
      .bot-no-border {
        border-bottom: none;
      }

      .center-placeholder::placeholder {
        text-align: center;
        color: #000;
      }

      .version {
        align-items: flex-end;
        justify-content: flex-end;
        display: flex;
      }
    </style>
  </head>
  <body>
    <div class=""doc size-A4 landscape"">
      <header class=""row space"">
        <h1>@Model.Election.Name vom @Model.Election.ContestDate.ToString(""dd. MMMM y"")</h1>
        <h1>@Model.ElectionTenant.Name</h1>
      </header>
      <main>
        <div class=""row stretch"">
          <span class=""label space-right"">A</span>
          <div class=""grow"">
            <div class=""row space"">
              <div class=""row col-main"">
                <div>
                  <span class=""bold"">Bezeichnung</span> des Wahlvorschlags:
                </div>
                <div class=""grow col"">
                  <div class=""input"">
                    <input value=""@Model.List.Name""/>
                    <div class=""border""></div>
                  </div>
                </div>
              </div>
            </div>
            <div class=""row space"">
              <div class=""row col-main"">
                <div>
                  Evtl. <span class=""bold"">Präzisierung</span> nach Alter,
                  Geschlecht, Region oder Parteiflügel:
                </div>
                <div class=""input grow"">
                  <input value=""@Model.List.Description""/>
                  <div class=""border""></div>
                </div>
              </div>
            </div>
            <div class=""row col-main space"">
              <div class=""flex"">
                <span class=""bold"">Listennnummer</span> (wird vom Kanton zugeteilt):
                <div class=""input inline-input w-4"">
                  <input value=""@Model.List.Indenture""/>
                  <div class=""border""></div>
                </div>
              </div>
              @if(Model.List.IndentureModifiedDate.HasValue) 
              {
                <div class=""flex"">
                  Einreichedatum:
                  <div class=""input inline-input w-6"">
                    <input value=""@Model.List.IndentureModifiedDate.Value.ToString(""d"")""/>
                    <div class=""border""></div>
                  </div>
                  <div class=""input inline-input w-4"">
                    <input value=""@Model.List.IndentureModifiedDate.Value.ToString(""t"")""/>
                    <div class=""border""></div>
                  </div>
                  Uhr
                </div>
              }
            </div>
          </div>
        </div>
        <div>
          <div class=""row space"">
            <div class=""row"">
              <span class=""label space-right"">B</span>
              <div>
                <h2 class=""inline"">Kandidaturen</h2>
                <span>(Bitte in Blockschrift)</span>
              </div>
            </div>
            <span>Anzahl Sitze: @Model.ElectionNumberOfMandates</span>
          </div>
          <table class=""fullwidth"">
            <thead>
              <tr>
                <th rowspan=""2"">Nr.</th>
                <th rowspan=""2"" style=""width: 3cm"">Name</th>
                <th rowspan=""2"" style=""width: 3cm"">Vorname</th>
                <th rowspan=""2"">
                  <span class=""upright"">Geschlecht (m/w)</span>
                </th>
                <th colspan=""3"" class=""bot-no-border"">Geburtsdatum</th>
                <th class=""bot-no-border"" style=""width: 4cm;"">Beruf</th>
                <th colspan=""3"" class=""bot-no-border"">Adresse</th>
                <th colspan=""2"" class=""bot-no-border"">Heimatort/e</th>
                <th rowspan=""2""><span class=""upright"">Bisher</span></th>
                @if (!Model.ListIsDraft)
                {
                  <th rowspan=""2"" style=""width: 3.5cm"">
                    Unterschrift<span class=""super small"">1)</span><br />der Kandidierenden
                  </th>
                }
                <th rowspan=""2"" style=""width: .2cm"">Kontrolle (leer lassen)</th>
              </tr>
              <tr class=""top-no-border"">
                <th><span class=""upright"">Tag</span></th>
                <th><span class=""upright"">Monat</span></th>
                <th><span class=""upright"">Jahr</span></th>
                <th style=""width: 3.5cm;"">
                  inkl. allfällige Titel und weitere Bezeichnungen für
                  Stimmzettel
                </th>
                <th style=""width: 3cm;"">Strasse/Nr.</th>
                <th>PLZ</th>
                <th>Wohnort</th>
                <th style=""width: 3cm;""></th>
                <th>Kt.</th>
              </tr>
            </thead>
            <tbody>
            @foreach (var candidate in Model.List.Candidates)
            {
              <tr>
                <td class=""filled right"">@candidate.Index</td>
                <td>@(string.IsNullOrEmpty(candidate.BallotFamilyName) ? candidate.FamilyName : candidate.BallotFamilyName)</td>
                <td>@(string.IsNullOrEmpty(candidate.BallotFirstName) ? candidate.FirstName : candidate.BallotFirstName)</td>
                <td class=""center"">
                  @switch (candidate.Sex)
                  {
                    case SexType.Female:
                      <span>w</span>
                      break;
                    case SexType.Male:
                      <span>m</span>
                      break;
                  }
                </td>
                <td class=""center"">@candidate.DateOfBirth.Day</td>
                <td class=""center"">@candidate.DateOfBirth.Month</td>
                <td class=""center"">@candidate.DateOfBirth.Year</td>
                <td>@candidate.OccupationalTitle</td>
                <td>@candidate.Street @candidate.HouseNumber</td>
                <td>@candidate.ZipCode</td>
                <td>@candidate.Locality</td>
                <td class=""right"">@candidate.Origin</td>
                <td>@candidate.OriginCanton</td>
                <!-- Bisher -->
                <td></td>
                <!-- Unterschriftsfeld -->
                @if (!Model.ListIsDraft) 
                {
                  <td></td>
                }
                <td class=""filled""></td>
              </tr>
            }
            </tbody>
          </table>
        </div>
        <div class=""row space space-bottom"">
          <div>
            Vertretung des Wahlvorschlags durch Unterzeichner/in Nr.
            <div class=""input inline-input"">
              <input />
              <div class=""border""></div>
            </div>
          </div>
          <div><span class=""bold"">oder </span></div>
          <div>
            Name und Vorname
            <div class=""input inline-input w-16"">
              <input value=""@Model.ListCreatedBy.Firstname @Model.ListCreatedBy.Lastname"" />
              <div class=""border""></div>
            </div>
            E-Mail:
            <div class=""input inline-input"">
              <input value=""@Model.ListCreatedBy.Emails.FirstOrDefault(e => e.Primary)?.Email""/>
              <div class=""border""></div>
            </div>
          </div>
        </div>
        <div class=""row space space-bottom""> 
          <div>
            Stellvertretung des Wahlvorschlags d. Unterzeichner/in Nr.
            <div class=""input inline-input"">
              <input />
              <div class=""border""></div>
            </div>
          </div>
          <div><span class=""bold"">oder </span></div>
          <div>
            Name und Vorname
            <div class=""input inline-input w-16"">
              <input value=""@Model.ListDeputy?.Firstname @Model.ListDeputy?.Lastname""/>
              <div class=""border""></div>
            </div>
            E-Mail:
            <div class=""input inline-input"">
              <input value=""@Model.ListDeputy?.Emails.FirstOrDefault(e => e.Primary)?.Email""/>
              <div class=""border""></div>
            </div>
          </div>
        </div>
        <div class=""space-bottom"">
          Vertretung des Wahlvorschlags sowie deren Stellvertretung sind
          gegenüber den zuständigen Amtsstellen von Kanton und Bund berechtigt
          und verpflichtet, allenfalls nötige Erklärungen zur Bereinigung von
          Anständen oder Unklarheiten im Namen aller Unterzeichnenden
          rechtsverbindlich abzugeben (BPR Art. 25 Abs. 2). Wo eine klare
          Bezeichnung fehlt, kommt diese Aufgabe der erst- und der
          zweitunterzeichnenden Person zu.
        </div>
        <div class=""row stretch"">
          <span class=""super small space-right"">1)</span>
          <div class=""hint"">
            mit der Unterschrift erklärt der Kandidat oder die Kandidatin, dass
            er/sie dem Wahlvorschlag zustimmt und die Angaben zu seiner/ihrer
            Person richtig sind.<br />Massgebend sind die Verhältnisse am
            Wahltag. Nachträgliche Änderungswünsche können nicht berücksichtigt
            werden.
          </div>
          <div class=""grow version hint"">Version 1.0</div>
        </div>
      </main>
    </div>
  </body>
</html>
", Filename = "@Model.Election.Name - Kandidaten.pdf", Format = 0, Landscape = true, Type = 0 }
                    );
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.BallotDocument", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Election", "Election")
                        .WithMany("Documents")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.Candidate", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Country", "Country")
                        .WithMany("Candidates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eawv.Service.DataAccess.Entities.List", "List")
                        .WithMany("Candidates")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.DomainOfInfluenceElection", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("ParticipatingElections")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eawv.Service.DataAccess.Entities.Election", "Election")
                        .WithMany("DomainsOfInfluence")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.InfoText", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Election", "Election")
                        .WithMany("InfoTexts")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.List", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Election", "Election")
                        .WithMany("Lists")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eawv.Service.DataAccess.Entities.ListUnion", "ListSubUnion")
                        .WithMany("SubUnionLists")
                        .HasForeignKey("ListSubUnionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Eawv.Service.DataAccess.Entities.ListUnion", "ListUnion")
                        .WithMany("UnionLists")
                        .HasForeignKey("ListUnionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.ListUnion", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.List", "RootList")
                        .WithOne("RootListUnion")
                        .HasForeignKey("Eawv.Service.DataAccess.Entities.ListUnion", "RootListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eawv.Service.DataAccess.Entities.MarkedElement", b =>
                {
                    b.HasOne("Eawv.Service.DataAccess.Entities.Candidate", "Candidate")
                        .WithMany("MarkedElements")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
